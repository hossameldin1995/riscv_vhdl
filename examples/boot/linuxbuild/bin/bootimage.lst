
../linuxbuild/bin/bootimage:     file format elf64-littleriscv


Disassembly of section .text:

0000000000000000 <trap_table>:
  .globl env_ucall_c

trap_table:
# 8-bytes per exception entry
trap_table:
  j _start            # 
   0:	0940006f          	j	94 <_start>
  nop
   4:	00000013          	nop
  j exception_entry   # Instruction Misaligned
   8:	17c0006f          	j	184 <exception_entry>
  nop
   c:	00000013          	nop
  j exception_entry   # Instruction Load Fault
  10:	1740006f          	j	184 <exception_entry>
  nop
  14:	00000013          	nop
  j exception_entry   # Instruction Illegal
  18:	16c0006f          	j	184 <exception_entry>
  nop
  1c:	00000013          	nop
  j exception_entry   # Breakpoint
  20:	1640006f          	j	184 <exception_entry>
  nop
  24:	00000013          	nop
  j exception_entry   # Load Misaligned
  28:	15c0006f          	j	184 <exception_entry>
  nop
  2c:	00000013          	nop
  j exception_entry   # Load Fault
  30:	1540006f          	j	184 <exception_entry>
  nop
  34:	00000013          	nop
  j exception_entry   # Store Misaligned
  38:	14c0006f          	j	184 <exception_entry>
  nop
  3c:	00000013          	nop
  j exception_entry   # Store Fault
  40:	1440006f          	j	184 <exception_entry>
  nop
  44:	00000013          	nop
  j env_ucall         # Call from U-mode
  48:	1300006f          	j	178 <env_ucall>
  nop
  4c:	00000013          	nop
  j exception_entry   # Call from S-mode
  50:	1340006f          	j	184 <exception_entry>
  nop
  54:	00000013          	nop
  j exception_entry   # Call from H-mode
  58:	12c0006f          	j	184 <exception_entry>
  nop
  5c:	00000013          	nop
  j exception_entry   # Call from M-mode
  60:	1240006f          	j	184 <exception_entry>
  nop
  64:	00000013          	nop
  j exception_entry   # Instruction Page Fault
  68:	11c0006f          	j	184 <exception_entry>
  nop
  6c:	00000013          	nop
  j exception_entry   # Load Page Fault
  70:	1140006f          	j	184 <exception_entry>
  nop
  74:	00000013          	nop
  j exception_entry   # Store Page Fault
  78:	10c0006f          	j	184 <exception_entry>
  nop
  7c:	00000013          	nop
  j exception_entry   # Stack Overflow
  80:	1040006f          	j	184 <exception_entry>
  nop
  84:	00000013          	nop
  j exception_entry   # Stack Underflow
  88:	0fc0006f          	j	184 <exception_entry>
  nop
  8c:	00000013          	nop

0000000000000090 <bad_trap>:

bad_trap:
  j bad_trap
  90:	0000006f          	j	90 <bad_trap>

0000000000000094 <_start>:

_start:
  li  x1, 0
  94:	00000093          	li	ra,0
  li  x2, 0
  98:	00000113          	li	sp,0
  li  x3, 0
  9c:	00000193          	li	gp,0
  li  x4, 0
  a0:	00000213          	li	tp,0
  li  x5, 0
  a4:	00000293          	li	t0,0
  li  x6, 0
  a8:	00000313          	li	t1,0
  li  x7, 0
  ac:	00000393          	li	t2,0
  li  x8, 0
  b0:	00000413          	li	s0,0
  li  x9, 0
  b4:	00000493          	li	s1,0
  li  x10,0
  b8:	00000513          	li	a0,0
  li  x11,0
  bc:	00000593          	li	a1,0
  li  x12,0
  c0:	00000613          	li	a2,0
  li  x13,0
  c4:	00000693          	li	a3,0
  li  x14,0
  c8:	00000713          	li	a4,0
  li  x15,0
  cc:	00000793          	li	a5,0
  li  x16,0
  d0:	00000813          	li	a6,0
  li  x17,0
  d4:	00000893          	li	a7,0
  li  x18,0
  d8:	00000913          	li	s2,0
  li  x19,0
  dc:	00000993          	li	s3,0
  li  x20,0
  e0:	00000a13          	li	s4,0
  li  x21,0
  e4:	00000a93          	li	s5,0
  li  x22,0
  e8:	00000b13          	li	s6,0
  li  x23,0
  ec:	00000b93          	li	s7,0
  li  x24,0
  f0:	00000c13          	li	s8,0
  li  x25,0
  f4:	00000c93          	li	s9,0
  li  x26,0
  f8:	00000d13          	li	s10,0
  li  x27,0
  fc:	00000d93          	li	s11,0
  li  x28,0
 100:	00000e13          	li	t3,0
  li  x29,0
 104:	00000e93          	li	t4,0
  li  x30,0
 108:	00000f13          	li	t5,0
  li  x31,0
 10c:	00000f93          	li	t6,0
  ##! csrrs - atomic read and set bit
  ##! csrc (pseudo asm instruction) - clear bit 
  ##! csrrc - atomic read and clear bit

  # Clear Previous mode (set U-mode), disable interrupt in U-mode
  li t0, 0x00001880   # MPP[12:11] = 0x0 MPIE[7]=0 (Previous to machine mode)
 110:	000022b7          	lui	t0,0x2
 114:	8802829b          	addiw	t0,t0,-1920
  csrc mstatus, t0    # run tests in user mode = 0, by clearing bits
 118:	3002b073          	csrc	mstatus,t0
  #csrs mstatus, t0    # enable FPU
  #li t0, MSTATUS_XS;   
  #csrs mstatus, t0    # enable accelerator

  ##! init mtvec register (see https://github.com/riscv/riscv-test-env/blob/master/p/riscv_test.h)
  la t0, interrupt_entry
 11c:	00000297          	auipc	t0,0x0
 120:	16428293          	addi	t0,t0,356 # 280 <interrupt_entry>
  csrw mtvec, t0
 124:	30529073          	csrw	mtvec,t0
  li t0, 0x00000800
 128:	000012b7          	lui	t0,0x1
 12c:	8002829b          	addiw	t0,t0,-2048
  csrs mie, t0       # Enable External irq (ftom PLIC) for M mode
 130:	3042a073          	csrs	mie,t0
  fmv.s.x f30,x0
  fmv.s.x f31,x0
#endif

  ##! initialize global pointer (no need in it)
  lui gp, 0x10000
 134:	100001b7          	lui	gp,0x10000

  ##! get core id
  csrr a0, mhartid            # a0 <= MHARTID value
 138:	f1402573          	csrr	a0,mhartid

#define SRAM_BASE_ADDR  0x10000000
#define SRAM_SIZE_BYTES (1<<18)
#define STACK_CORE1_BYTES 4096

  li  sp, SRAM_BASE_ADDR+SRAM_SIZE_BYTES
 13c:	10040137          	lui	sp,0x10040
  li  a1, 1
 140:	00100593          	li	a1,1
  beq a0, a1, sp_init_core1
 144:	00b50663          	beq	a0,a1,150 <sp_init_core1>
  li  a1, 0
 148:	00000593          	li	a1,0
  beq a0, a1, sp_init_core0
 14c:	00b50463          	beq	a0,a1,154 <sp_init_core0>

0000000000000150 <sp_init_core1>:
sp_init_core1:
  j sp_init_coreall
 150:	00c0006f          	j	15c <sp_init_coreall>

0000000000000154 <sp_init_core0>:
sp_init_core0:
  li t0,-STACK_CORE1_BYTES
 154:	fffff2b7          	lui	t0,0xfffff
  add sp, sp, t0
 158:	00510133          	add	sp,sp,t0

000000000000015c <sp_init_coreall>:
sp_init_coreall:
  add tp, zero, sp            # tp = sp + 0 (mov)
 15c:	00200233          	add	tp,zero,sp
  ## Use tp register to save/restore registers context on task switching
  addi tp,tp,-256              # tp = tp - 256 = 0x1007ff00
 160:	f0020213          	addi	tp,tp,-256 # ffffffffffffff00 <_end+0xfffffffffffff38a>
  addi sp, sp,-264
 164:	ef810113          	addi	sp,sp,-264 # 1003fef8 <_end+0x1003f382>

  # copy image 64 KB
  jal _init
 168:	4be000ef          	jal	ra,626 <_init>

  ##! jump to entry point in SRAM = 0x10000000
  ##!     'meps' - Machine Exception Program Coutner
  li  t0, SRAM_BASE_ADDR
 16c:	100002b7          	lui	t0,0x10000
  csrw mepc, t0
 170:	34129073          	csrw	mepc,t0
  ##! @see riscv-priv-spec-1.7.pdf. 3.2.1
  ##! After handling a trap, the ERET instruction is used to return to the privilege level at which the
  ##! trap occurred. In addition to manipulating the privilege stack as described in Section 3.1.5, ERET
  ##! sets the pc to the value stored in the Xepc register, where X is the privilege mode (S, H, or M) in
  ##! which the ERET instruction was executed.
  mret
 174:	30200073          	mret

0000000000000178 <env_ucall>:

env_ucall:
  li  sp, SRAM_BASE_ADDR+SRAM_SIZE_BYTES
 178:	10040137          	lui	sp,0x10040
  addi sp, sp,-264
 17c:	ef810113          	addi	sp,sp,-264 # 1003fef8 <_end+0x1003f382>
  jal env_ucall_c
 180:	6fc000ef          	jal	ra,87c <env_ucall_c>

0000000000000184 <exception_entry>:
  ## never reach here

exception_entry:
  fence
 184:	0ff0000f          	fence
  _save_context(tp)
 188:	00123023          	sd	ra,0(tp) # 0 <trap_table>
 18c:	00823423          	sd	s0,8(tp) # 8 <trap_table+0x8>
 190:	00923823          	sd	s1,16(tp) # 10 <trap_table+0x10>
 194:	01223c23          	sd	s2,24(tp) # 18 <trap_table+0x18>
 198:	03323023          	sd	s3,32(tp) # 20 <trap_table+0x20>
 19c:	03423423          	sd	s4,40(tp) # 28 <trap_table+0x28>
 1a0:	03523823          	sd	s5,48(tp) # 30 <trap_table+0x30>
 1a4:	03623c23          	sd	s6,56(tp) # 38 <trap_table+0x38>
 1a8:	05723023          	sd	s7,64(tp) # 40 <trap_table+0x40>
 1ac:	05823423          	sd	s8,72(tp) # 48 <trap_table+0x48>
 1b0:	05923823          	sd	s9,80(tp) # 50 <trap_table+0x50>
 1b4:	05a23c23          	sd	s10,88(tp) # 58 <trap_table+0x58>
 1b8:	07b23023          	sd	s11,96(tp) # 60 <trap_table+0x60>
 1bc:	06223423          	sd	sp,104(tp) # 68 <trap_table+0x68>
 1c0:	07023c23          	sd	a6,120(tp) # 78 <trap_table+0x78>
 1c4:	09123023          	sd	a7,128(tp) # 80 <trap_table+0x80>
 1c8:	08a23423          	sd	a0,136(tp) # 88 <trap_table+0x88>
 1cc:	08b23823          	sd	a1,144(tp) # 90 <bad_trap>
 1d0:	08c23c23          	sd	a2,152(tp) # 98 <_start+0x4>
 1d4:	0ad23023          	sd	a3,160(tp) # a0 <_start+0xc>
 1d8:	0ae23423          	sd	a4,168(tp) # a8 <_start+0x14>
 1dc:	0af23823          	sd	a5,176(tp) # b0 <_start+0x1c>
 1e0:	0b023c23          	sd	a6,184(tp) # b8 <_start+0x24>
 1e4:	0d123023          	sd	a7,192(tp) # c0 <_start+0x2c>
 1e8:	0c523423          	sd	t0,200(tp) # c8 <_start+0x34>
 1ec:	0c623823          	sd	t1,208(tp) # d0 <_start+0x3c>
 1f0:	0c723c23          	sd	t2,216(tp) # d8 <_start+0x44>
 1f4:	0fc23023          	sd	t3,224(tp) # e0 <_start+0x4c>
 1f8:	0fd23423          	sd	t4,232(tp) # e8 <_start+0x54>
 1fc:	0e323823          	sd	gp,240(tp) # f0 <_start+0x5c>
  jal exception_handler_c
 200:	56c000ef          	jal	ra,76c <exception_handler_c>
  _restore_context(tp)
 204:	00023083          	ld	ra,0(tp) # 0 <trap_table>
 208:	00823403          	ld	s0,8(tp) # 8 <trap_table+0x8>
 20c:	01023483          	ld	s1,16(tp) # 10 <trap_table+0x10>
 210:	01823903          	ld	s2,24(tp) # 18 <trap_table+0x18>
 214:	02023983          	ld	s3,32(tp) # 20 <trap_table+0x20>
 218:	02823a03          	ld	s4,40(tp) # 28 <trap_table+0x28>
 21c:	03023a83          	ld	s5,48(tp) # 30 <trap_table+0x30>
 220:	03823b03          	ld	s6,56(tp) # 38 <trap_table+0x38>
 224:	04023b83          	ld	s7,64(tp) # 40 <trap_table+0x40>
 228:	04823c03          	ld	s8,72(tp) # 48 <trap_table+0x48>
 22c:	05023c83          	ld	s9,80(tp) # 50 <trap_table+0x50>
 230:	05823d03          	ld	s10,88(tp) # 58 <trap_table+0x58>
 234:	06023d83          	ld	s11,96(tp) # 60 <trap_table+0x60>
 238:	06823103          	ld	sp,104(tp) # 68 <trap_table+0x68>
 23c:	07823803          	ld	a6,120(tp) # 78 <trap_table+0x78>
 240:	08023883          	ld	a7,128(tp) # 80 <trap_table+0x80>
 244:	08823503          	ld	a0,136(tp) # 88 <trap_table+0x88>
 248:	09023583          	ld	a1,144(tp) # 90 <bad_trap>
 24c:	09823603          	ld	a2,152(tp) # 98 <_start+0x4>
 250:	0a023683          	ld	a3,160(tp) # a0 <_start+0xc>
 254:	0a823703          	ld	a4,168(tp) # a8 <_start+0x14>
 258:	0b023783          	ld	a5,176(tp) # b0 <_start+0x1c>
 25c:	0b823803          	ld	a6,184(tp) # b8 <_start+0x24>
 260:	0c023883          	ld	a7,192(tp) # c0 <_start+0x2c>
 264:	0c823283          	ld	t0,200(tp) # c8 <_start+0x34>
 268:	0d023303          	ld	t1,208(tp) # d0 <_start+0x3c>
 26c:	0d823383          	ld	t2,216(tp) # d8 <_start+0x44>
 270:	0e023e03          	ld	t3,224(tp) # e0 <_start+0x4c>
 274:	0e823e83          	ld	t4,232(tp) # e8 <_start+0x54>
 278:	0f023183          	ld	gp,240(tp) # f0 <_start+0x5c>
  mret
 27c:	30200073          	mret

0000000000000280 <interrupt_entry>:

interrupt_entry:
  ##! module CSRFile rises io_fatc signal that is cause of the 'ptw.invalidate'.
  fence
 280:	0ff0000f          	fence
  csrw mscratch, a0;
 284:	34051073          	csrw	mscratch,a0

  _save_context(tp)
 288:	00123023          	sd	ra,0(tp) # 0 <trap_table>
 28c:	00823423          	sd	s0,8(tp) # 8 <trap_table+0x8>
 290:	00923823          	sd	s1,16(tp) # 10 <trap_table+0x10>
 294:	01223c23          	sd	s2,24(tp) # 18 <trap_table+0x18>
 298:	03323023          	sd	s3,32(tp) # 20 <trap_table+0x20>
 29c:	03423423          	sd	s4,40(tp) # 28 <trap_table+0x28>
 2a0:	03523823          	sd	s5,48(tp) # 30 <trap_table+0x30>
 2a4:	03623c23          	sd	s6,56(tp) # 38 <trap_table+0x38>
 2a8:	05723023          	sd	s7,64(tp) # 40 <trap_table+0x40>
 2ac:	05823423          	sd	s8,72(tp) # 48 <trap_table+0x48>
 2b0:	05923823          	sd	s9,80(tp) # 50 <trap_table+0x50>
 2b4:	05a23c23          	sd	s10,88(tp) # 58 <trap_table+0x58>
 2b8:	07b23023          	sd	s11,96(tp) # 60 <trap_table+0x60>
 2bc:	06223423          	sd	sp,104(tp) # 68 <trap_table+0x68>
 2c0:	07023c23          	sd	a6,120(tp) # 78 <trap_table+0x78>
 2c4:	09123023          	sd	a7,128(tp) # 80 <trap_table+0x80>
 2c8:	08a23423          	sd	a0,136(tp) # 88 <trap_table+0x88>
 2cc:	08b23823          	sd	a1,144(tp) # 90 <bad_trap>
 2d0:	08c23c23          	sd	a2,152(tp) # 98 <_start+0x4>
 2d4:	0ad23023          	sd	a3,160(tp) # a0 <_start+0xc>
 2d8:	0ae23423          	sd	a4,168(tp) # a8 <_start+0x14>
 2dc:	0af23823          	sd	a5,176(tp) # b0 <_start+0x1c>
 2e0:	0b023c23          	sd	a6,184(tp) # b8 <_start+0x24>
 2e4:	0d123023          	sd	a7,192(tp) # c0 <_start+0x2c>
 2e8:	0c523423          	sd	t0,200(tp) # c8 <_start+0x34>
 2ec:	0c623823          	sd	t1,208(tp) # d0 <_start+0x3c>
 2f0:	0c723c23          	sd	t2,216(tp) # d8 <_start+0x44>
 2f4:	0fc23023          	sd	t3,224(tp) # e0 <_start+0x4c>
 2f8:	0fd23423          	sd	t4,232(tp) # e8 <_start+0x54>
 2fc:	0e323823          	sd	gp,240(tp) # f0 <_start+0x5c>
  ##       long handle_trap(long cause, long epc, long long regs[32])
  ##             a0 = argument 1: cause
  ##             a1 = argument 2: mepc
  ##             a2 = argument 3: pointer on stack
  ## @return     a0 New instruction pointer offset
  csrr a0, mcause
 300:	34202573          	csrr	a0,mcause
  csrr a1, mepc
 304:	341025f3          	csrr	a1,mepc
  sd a1,COOP_REG_TP(tp)
 308:	06b23823          	sd	a1,112(tp) # 70 <trap_table+0x70>
  mv a2, sp
 30c:	00010613          	mv	a2,sp
  # !!! Cannot reset external pending bits only via IrqController (page 28)
  li t0, 0x00000800
 310:	000012b7          	lui	t0,0x1
 314:	8002829b          	addiw	t0,t0,-2048
  csrc mip, t0      #csrc pseudo asm instruction clear CSR bit.
 318:	3442b073          	csrc	mip,t0
                    #[11] MEIP: machine pending external interrupt
  jal interrupt_handler_c
 31c:	49e000ef          	jal	ra,7ba <interrupt_handler_c>

  # tp-offset in the context array is used to save mepc value. An it may be
  # modified by isr handler during preemtive task switching.
  ld a1,COOP_REG_TP(tp)
 320:	07023583          	ld	a1,112(tp) # 70 <trap_table+0x70>
  csrw mepc,a1
 324:	34159073          	csrw	mepc,a1
  _restore_context(tp)
 328:	00023083          	ld	ra,0(tp) # 0 <trap_table>
 32c:	00823403          	ld	s0,8(tp) # 8 <trap_table+0x8>
 330:	01023483          	ld	s1,16(tp) # 10 <trap_table+0x10>
 334:	01823903          	ld	s2,24(tp) # 18 <trap_table+0x18>
 338:	02023983          	ld	s3,32(tp) # 20 <trap_table+0x20>
 33c:	02823a03          	ld	s4,40(tp) # 28 <trap_table+0x28>
 340:	03023a83          	ld	s5,48(tp) # 30 <trap_table+0x30>
 344:	03823b03          	ld	s6,56(tp) # 38 <trap_table+0x38>
 348:	04023b83          	ld	s7,64(tp) # 40 <trap_table+0x40>
 34c:	04823c03          	ld	s8,72(tp) # 48 <trap_table+0x48>
 350:	05023c83          	ld	s9,80(tp) # 50 <trap_table+0x50>
 354:	05823d03          	ld	s10,88(tp) # 58 <trap_table+0x58>
 358:	06023d83          	ld	s11,96(tp) # 60 <trap_table+0x60>
 35c:	06823103          	ld	sp,104(tp) # 68 <trap_table+0x68>
 360:	07823803          	ld	a6,120(tp) # 78 <trap_table+0x78>
 364:	08023883          	ld	a7,128(tp) # 80 <trap_table+0x80>
 368:	08823503          	ld	a0,136(tp) # 88 <trap_table+0x88>
 36c:	09023583          	ld	a1,144(tp) # 90 <bad_trap>
 370:	09823603          	ld	a2,152(tp) # 98 <_start+0x4>
 374:	0a023683          	ld	a3,160(tp) # a0 <_start+0xc>
 378:	0a823703          	ld	a4,168(tp) # a8 <_start+0x14>
 37c:	0b023783          	ld	a5,176(tp) # b0 <_start+0x1c>
 380:	0b823803          	ld	a6,184(tp) # b8 <_start+0x24>
 384:	0c023883          	ld	a7,192(tp) # c0 <_start+0x2c>
 388:	0c823283          	ld	t0,200(tp) # c8 <_start+0x34>
 38c:	0d023303          	ld	t1,208(tp) # d0 <_start+0x3c>
 390:	0d823383          	ld	t2,216(tp) # d8 <_start+0x44>
 394:	0e023e03          	ld	t3,224(tp) # e0 <_start+0x4c>
 398:	0e823e83          	ld	t4,232(tp) # e8 <_start+0x54>
 39c:	0f023183          	ld	gp,240(tp) # f0 <_start+0x5c>
  mret
 3a0:	30200073          	mret

00000000000003a4 <fw_get_cpuid>:
#include "axi_maps.h"
#include "encoding.h"

static const int FW_IMAGE_SIZE_BYTES = 1 << 17;

int fw_get_cpuid() {
 3a4:	1101                	addi	sp,sp,-32
 3a6:	ec22                	sd	s0,24(sp)
 3a8:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mhartid" : "=r" (ret));
 3aa:	f14027f3          	csrr	a5,mhartid
 3ae:	fef42623          	sw	a5,-20(s0)
    return ret;
 3b2:	fec42783          	lw	a5,-20(s0)
}
 3b6:	853e                	mv	a0,a5
 3b8:	6462                	ld	s0,24(sp)
 3ba:	6105                	addi	sp,sp,32
 3bc:	8082                	ret

00000000000003be <led_set>:

void led_set(int output) {
 3be:	1101                	addi	sp,sp,-32
 3c0:	ec22                	sd	s0,24(sp)
 3c2:	1000                	addi	s0,sp,32
 3c4:	87aa                	mv	a5,a0
 3c6:	fef42623          	sw	a5,-20(s0)
    // [3:0] DIP pins
    ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->ouser = (output << 4);
 3ca:	fec42783          	lw	a5,-20(s0)
 3ce:	0047979b          	slliw	a5,a5,0x4
 3d2:	0007871b          	sext.w	a4,a5
 3d6:	4785                	li	a5,1
 3d8:	07fe                	slli	a5,a5,0x1f
 3da:	2701                	sext.w	a4,a4
 3dc:	c798                	sw	a4,8(a5)
}
 3de:	0001                	nop
 3e0:	6462                	ld	s0,24(sp)
 3e2:	6105                	addi	sp,sp,32
 3e4:	8082                	ret

00000000000003e6 <get_dip>:

int get_dip(int idx) {
 3e6:	7179                	addi	sp,sp,-48
 3e8:	f422                	sd	s0,40(sp)
 3ea:	1800                	addi	s0,sp,48
 3ec:	87aa                	mv	a5,a0
 3ee:	fcf42e23          	sw	a5,-36(s0)
    // [3:0] DIP pins
    int dip = ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->iuser >> idx;
 3f2:	4785                	li	a5,1
 3f4:	07fe                	slli	a5,a5,0x1f
 3f6:	43dc                	lw	a5,4(a5)
 3f8:	0007871b          	sext.w	a4,a5
 3fc:	fdc42783          	lw	a5,-36(s0)
 400:	00f757bb          	srlw	a5,a4,a5
 404:	2781                	sext.w	a5,a5
 406:	fef42623          	sw	a5,-20(s0)
    return dip & 1;
 40a:	fec42783          	lw	a5,-20(s0)
 40e:	8b85                	andi	a5,a5,1
 410:	2781                	sext.w	a5,a5
}
 412:	853e                	mv	a0,a5
 414:	7422                	ld	s0,40(sp)
 416:	6145                	addi	sp,sp,48
 418:	8082                	ret

000000000000041a <print_uart>:

void print_uart(const char *buf, int sz) {
 41a:	7179                	addi	sp,sp,-48
 41c:	f422                	sd	s0,40(sp)
 41e:	1800                	addi	s0,sp,48
 420:	fca43c23          	sd	a0,-40(s0)
 424:	87ae                	mv	a5,a1
 426:	fcf42a23          	sw	a5,-44(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART1;
 42a:	000807b7          	lui	a5,0x80
 42e:	0785                	addi	a5,a5,1
 430:	07b2                	slli	a5,a5,0xc
 432:	fef43023          	sd	a5,-32(s0)
    for (int i = 0; i < sz; i++) {
 436:	fe042623          	sw	zero,-20(s0)
 43a:	a825                	j	472 <print_uart+0x58>
        while (uart->status & UART_STATUS_TX_FULL) {}
 43c:	0001                	nop
 43e:	fe043783          	ld	a5,-32(s0)
 442:	439c                	lw	a5,0(a5)
 444:	0007871b          	sext.w	a4,a5
 448:	4785                	li	a5,1
 44a:	8ff9                	and	a5,a5,a4
 44c:	2781                	sext.w	a5,a5
 44e:	fbe5                	bnez	a5,43e <print_uart+0x24>
        uart->data = buf[i];
 450:	fec42783          	lw	a5,-20(s0)
 454:	fd843703          	ld	a4,-40(s0)
 458:	97ba                	add	a5,a5,a4
 45a:	0007c783          	lbu	a5,0(a5) # 80000 <_end+0x7f48a>
 45e:	0007871b          	sext.w	a4,a5
 462:	fe043783          	ld	a5,-32(s0)
 466:	cb98                	sw	a4,16(a5)
    for (int i = 0; i < sz; i++) {
 468:	fec42783          	lw	a5,-20(s0)
 46c:	2785                	addiw	a5,a5,1
 46e:	fef42623          	sw	a5,-20(s0)
 472:	fec42703          	lw	a4,-20(s0)
 476:	fd442783          	lw	a5,-44(s0)
 47a:	2701                	sext.w	a4,a4
 47c:	2781                	sext.w	a5,a5
 47e:	faf74fe3          	blt	a4,a5,43c <print_uart+0x22>
    }
}
 482:	0001                	nop
 484:	7422                	ld	s0,40(sp)
 486:	6145                	addi	sp,sp,48
 488:	8082                	ret

000000000000048a <print_uart_hex>:

void print_uart_hex(long val) {
 48a:	7139                	addi	sp,sp,-64
 48c:	fc22                	sd	s0,56(sp)
 48e:	0080                	addi	s0,sp,64
 490:	fca43423          	sd	a0,-56(s0)
    unsigned char t, s;
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART1;
 494:	000807b7          	lui	a5,0x80
 498:	0785                	addi	a5,a5,1
 49a:	07b2                	slli	a5,a5,0xc
 49c:	fef43023          	sd	a5,-32(s0)
    for (int i = 0; i < 16; i++) {
 4a0:	fe042423          	sw	zero,-24(s0)
 4a4:	a8ad                	j	51e <print_uart_hex+0x94>
        while (uart->status & UART_STATUS_TX_FULL) {}
 4a6:	0001                	nop
 4a8:	fe043783          	ld	a5,-32(s0)
 4ac:	439c                	lw	a5,0(a5)
 4ae:	0007871b          	sext.w	a4,a5
 4b2:	4785                	li	a5,1
 4b4:	8ff9                	and	a5,a5,a4
 4b6:	2781                	sext.w	a5,a5
 4b8:	fbe5                	bnez	a5,4a8 <print_uart_hex+0x1e>
        
        t = (unsigned char)((val >> ((15 - i) * 4)) & 0xf);
 4ba:	473d                	li	a4,15
 4bc:	fe842783          	lw	a5,-24(s0)
 4c0:	40f707bb          	subw	a5,a4,a5
 4c4:	2781                	sext.w	a5,a5
 4c6:	0027979b          	slliw	a5,a5,0x2
 4ca:	2781                	sext.w	a5,a5
 4cc:	fc843703          	ld	a4,-56(s0)
 4d0:	40f757b3          	sra	a5,a4,a5
 4d4:	0ff7f793          	andi	a5,a5,255
 4d8:	8bbd                	andi	a5,a5,15
 4da:	fcf40fa3          	sb	a5,-33(s0)
        if (t < 10) {
 4de:	fdf44783          	lbu	a5,-33(s0)
 4e2:	0ff7f713          	andi	a4,a5,255
 4e6:	47a5                	li	a5,9
 4e8:	00e7e963          	bltu	a5,a4,4fa <print_uart_hex+0x70>
            s = t + '0';
 4ec:	fdf44783          	lbu	a5,-33(s0)
 4f0:	0307879b          	addiw	a5,a5,48
 4f4:	fef407a3          	sb	a5,-17(s0)
 4f8:	a039                	j	506 <print_uart_hex+0x7c>
        } else {
            s = (t - 10) + 'a';
 4fa:	fdf44783          	lbu	a5,-33(s0)
 4fe:	0577879b          	addiw	a5,a5,87
 502:	fef407a3          	sb	a5,-17(s0)
        }
        uart->data = s;
 506:	fef44783          	lbu	a5,-17(s0)
 50a:	0007871b          	sext.w	a4,a5
 50e:	fe043783          	ld	a5,-32(s0)
 512:	cb98                	sw	a4,16(a5)
    for (int i = 0; i < 16; i++) {
 514:	fe842783          	lw	a5,-24(s0)
 518:	2785                	addiw	a5,a5,1
 51a:	fef42423          	sw	a5,-24(s0)
 51e:	fe842783          	lw	a5,-24(s0)
 522:	0007871b          	sext.w	a4,a5
 526:	47bd                	li	a5,15
 528:	f6e7dfe3          	bge	a5,a4,4a6 <print_uart_hex+0x1c>
    }
}
 52c:	0001                	nop
 52e:	7462                	ld	s0,56(sp)
 530:	6121                	addi	sp,sp,64
 532:	8082                	ret

0000000000000534 <copy_image>:

void copy_image() { 
 534:	7139                	addi	sp,sp,-64
 536:	fc06                	sd	ra,56(sp)
 538:	f822                	sd	s0,48(sp)
 53a:	0080                	addi	s0,sp,64
    uint32_t tech;
    uint64_t *fwrom = (uint64_t *)ADDR_BUS0_XSLV_FWIMAGE;
 53c:	001007b7          	lui	a5,0x100
 540:	fef43423          	sd	a5,-24(s0)
    uint64_t *flash = (uint64_t *)ADDR_BUS0_XSLV_EXTFLASH;
 544:	002007b7          	lui	a5,0x200
 548:	fef43023          	sd	a5,-32(s0)
    uint64_t *sram = (uint64_t *)ADDR_BUS0_XSLV_SRAM;
 54c:	100007b7          	lui	a5,0x10000
 550:	fcf43c23          	sd	a5,-40(s0)
    pnp_map *pnp = (pnp_map *)ADDR_BUS0_XSLV_PNP;
 554:	001007b7          	lui	a5,0x100
 558:	17fd                	addi	a5,a5,-1
 55a:	07b2                	slli	a5,a5,0xc
 55c:	fcf43823          	sd	a5,-48(s0)

    /** 
     * Speed-up RTL simulation by skipping coping stage.
     * Or skip this stage to avoid rewritting of externally loaded image.
     */
    tech = pnp->tech & 0xFF;
 560:	fd043783          	ld	a5,-48(s0)
 564:	479c                	lw	a5,8(a5)
 566:	0ff7f793          	andi	a5,a5,255
 56a:	fcf42623          	sw	a5,-52(s0)

    if (tech != TECH_INFERRED && pnp->fwid == 0) {
 56e:	fcc42783          	lw	a5,-52(s0)
 572:	2781                	sext.w	a5,a5
 574:	c785                	beqz	a5,59c <copy_image+0x68>
 576:	fd043783          	ld	a5,-48(s0)
 57a:	43dc                	lw	a5,4(a5)
 57c:	e385                	bnez	a5,59c <copy_image+0x68>
            memcpy(sram, flash, FW_IMAGE_SIZE_BYTES);
        } else {
            print_uart("Coping FWIMAGE\r\n", 16);
            memcpy(sram, fwrom, FW_IMAGE_SIZE_BYTES);
        }*/
        print_uart("Coping FWIMAGE\r\n", 16);
 57e:	45c1                	li	a1,16
 580:	6785                	lui	a5,0x1
 582:	ac078513          	addi	a0,a5,-1344 # ac0 <FSE2_STATE_IDLE+0x8>
 586:	e95ff0ef          	jal	ra,41a <print_uart>
        memcpy(sram, fwrom, FW_IMAGE_SIZE_BYTES);
 58a:	000207b7          	lui	a5,0x20
 58e:	863e                	mv	a2,a5
 590:	fe843583          	ld	a1,-24(s0)
 594:	fd843503          	ld	a0,-40(s0)
 598:	334000ef          	jal	ra,8cc <memcpy>

    }
    // Write Firmware ID to avoid copy image after soft-reset.
    pnp->fwid = 0x20191025;
 59c:	fd043783          	ld	a5,-48(s0)
 5a0:	20191737          	lui	a4,0x20191
 5a4:	02570713          	addi	a4,a4,37 # 20191025 <_end+0x201904af>
 5a8:	c3d8                	sw	a4,4(a5)
    uint64_t *arr_csrs = (uint64_t *)0x80080000;
    uint64_t x1 = arr_csrs[CSR_MCPUID<<1]; 
    pnp->fwdbg1 = x1;
    arr_csrs[CSR_MCPUID<<1] = x1;
#endif
}
 5aa:	0001                	nop
 5ac:	70e2                	ld	ra,56(sp)
 5ae:	7442                	ld	s0,48(sp)
 5b0:	6121                	addi	sp,sp,64
 5b2:	8082                	ret

00000000000005b4 <timestamp_output>:

/** This function will be used during video recording to show
 how tochange npc register value on core[1] while core[0] is running
 Zephyr OS
*/
void timestamp_output() {
 5b4:	1101                	addi	sp,sp,-32
 5b6:	ec06                	sd	ra,24(sp)
 5b8:	e822                	sd	s0,16(sp)
 5ba:	1000                	addi	s0,sp,32
    gptimers_map *tmr = (gptimers_map *)ADDR_BUS0_XSLV_GPTIMERS;
 5bc:	000807b7          	lui	a5,0x80
 5c0:	0795                	addi	a5,a5,5
 5c2:	07b2                	slli	a5,a5,0xc
 5c4:	fef43023          	sd	a5,-32(s0)
    uint64_t start = tmr->highcnt;
 5c8:	fe043783          	ld	a5,-32(s0)
 5cc:	639c                	ld	a5,0(a5)
 5ce:	fef43423          	sd	a5,-24(s0)
    while (1) {
        if (tmr->highcnt < start || (start + SYS_HZ) < tmr->highcnt) {
 5d2:	fe043783          	ld	a5,-32(s0)
 5d6:	639c                	ld	a5,0(a5)
 5d8:	fe843703          	ld	a4,-24(s0)
 5dc:	00e7ee63          	bltu	a5,a4,5f8 <timestamp_output+0x44>
 5e0:	fe843703          	ld	a4,-24(s0)
 5e4:	05f5e7b7          	lui	a5,0x5f5e
 5e8:	10078793          	addi	a5,a5,256 # 5f5e100 <_end+0x5f5d58a>
 5ec:	973e                	add	a4,a4,a5
 5ee:	fe043783          	ld	a5,-32(s0)
 5f2:	639c                	ld	a5,0(a5)
 5f4:	fcf77fe3          	bgeu	a4,a5,5d2 <timestamp_output+0x1e>
            start = tmr->highcnt;
 5f8:	fe043783          	ld	a5,-32(s0)
 5fc:	639c                	ld	a5,0(a5)
 5fe:	fef43423          	sd	a5,-24(s0)
            print_uart("HIGHCNT: ", 9);
 602:	45a5                	li	a1,9
 604:	6785                	lui	a5,0x1
 606:	ad878513          	addi	a0,a5,-1320 # ad8 <FSE2_STATE_IDLE+0x20>
 60a:	e11ff0ef          	jal	ra,41a <print_uart>
            print_uart_hex(start);
 60e:	fe843783          	ld	a5,-24(s0)
 612:	853e                	mv	a0,a5
 614:	e77ff0ef          	jal	ra,48a <print_uart_hex>
            print_uart("\r\n", 2);
 618:	4589                	li	a1,2
 61a:	6785                	lui	a5,0x1
 61c:	ae878513          	addi	a0,a5,-1304 # ae8 <FSE2_STATE_IDLE+0x30>
 620:	dfbff0ef          	jal	ra,41a <print_uart>
        if (tmr->highcnt < start || (start + SYS_HZ) < tmr->highcnt) {
 624:	b77d                	j	5d2 <timestamp_output+0x1e>

0000000000000626 <_init>:
        }
    }
}

void _init() {
 626:	715d                	addi	sp,sp,-80
 628:	e486                	sd	ra,72(sp)
 62a:	e0a2                	sd	s0,64(sp)
 62c:	0880                	addi	s0,sp,80
    uint32_t tech;
    pnp_map *pnp = (pnp_map *)ADDR_BUS0_XSLV_PNP;
 62e:	001007b7          	lui	a5,0x100
 632:	17fd                	addi	a5,a5,-1
 634:	07b2                	slli	a5,a5,0xc
 636:	fef43423          	sd	a5,-24(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART1;
 63a:	000807b7          	lui	a5,0x80
 63e:	0785                	addi	a5,a5,1
 640:	07b2                	slli	a5,a5,0xc
 642:	fef43023          	sd	a5,-32(s0)
    gpio_map *gpio = (gpio_map *)ADDR_BUS0_XSLV_GPIO;
 646:	4785                	li	a5,1
 648:	07fe                	slli	a5,a5,0x1f
 64a:	fcf43c23          	sd	a5,-40(s0)
    irqctrl_map *p_irq = (irqctrl_map *)ADDR_BUS0_XSLV_IRQCTRL;
 64e:	400017b7          	lui	a5,0x40001
 652:	0786                	slli	a5,a5,0x1
 654:	fcf43823          	sd	a5,-48(s0)
  
    if (fw_get_cpuid() != 0) {
 658:	d4dff0ef          	jal	ra,3a4 <fw_get_cpuid>
 65c:	87aa                	mv	a5,a0
 65e:	cb9d                	beqz	a5,694 <_init+0x6e>
        // TODO: waiting event or something
        while(1) {
            // Just do something
            uint64_t *sram = (uint64_t *)ADDR_BUS0_XSLV_SRAM;
 660:	100007b7          	lui	a5,0x10000
 664:	fcf43423          	sd	a5,-56(s0)
            uint64_t tdata = sram[16*1024];
 668:	fc843703          	ld	a4,-56(s0)
 66c:	000207b7          	lui	a5,0x20
 670:	97ba                	add	a5,a5,a4
 672:	639c                	ld	a5,0(a5)
 674:	fcf43023          	sd	a5,-64(s0)
            sram[16*1024] = tdata;
 678:	fc843703          	ld	a4,-56(s0)
 67c:	000207b7          	lui	a5,0x20
 680:	97ba                	add	a5,a5,a4
 682:	fc043703          	ld	a4,-64(s0)
 686:	e398                	sd	a4,0(a5)
            tech = pnp->tech;
 688:	fe843783          	ld	a5,-24(s0)
 68c:	479c                	lw	a5,8(a5)
 68e:	faf42e23          	sw	a5,-68(s0)
        while(1) {
 692:	b7f9                	j	660 <_init+0x3a>
        }
    }

    // mask all interrupts in interrupt controller to avoid
    // unpredictable behaviour after elf-file reloading via debug port.
    p_irq->irq_mask = 0xFFFFFFFF;
 694:	fd043783          	ld	a5,-48(s0)
 698:	577d                	li	a4,-1
 69a:	c398                	sw	a4,0(a5)

    // Half period of the uart = Fbus / 115200 / 2 = 70 MHz / 115200 / 2:
    uart->scaler = SYS_HZ / 115200 / 2;  // 40 MHz
 69c:	fe043783          	ld	a5,-32(s0)
 6a0:	1b200713          	li	a4,434
 6a4:	c3d8                	sw	a4,4(a5)

    gpio->direction = 0xF;  // [3:0] input DIP; [11:4] output LEDs
 6a6:	fd843783          	ld	a5,-40(s0)
 6aa:	473d                	li	a4,15
 6ac:	c398                	sw	a4,0(a5)

    led_set(0x01);
 6ae:	4505                	li	a0,1
 6b0:	d0fff0ef          	jal	ra,3be <led_set>
    print_uart("Boot . . .", 10);
 6b4:	45a9                	li	a1,10
 6b6:	6785                	lui	a5,0x1
 6b8:	af078513          	addi	a0,a5,-1296 # af0 <FSE2_STATE_IDLE+0x38>
 6bc:	d5fff0ef          	jal	ra,41a <print_uart>
    led_set(0x02);
 6c0:	4509                	li	a0,2
 6c2:	cfdff0ef          	jal	ra,3be <led_set>

    copy_image();
 6c6:	e6fff0ef          	jal	ra,534 <copy_image>
    led_set(0x03);
 6ca:	450d                	li	a0,3
 6cc:	cf3ff0ef          	jal	ra,3be <led_set>
    print_uart("OK\r\n", 4);
 6d0:	4591                	li	a1,4
 6d2:	6785                	lui	a5,0x1
 6d4:	b0078513          	addi	a0,a5,-1280 # b00 <FSE2_STATE_IDLE+0x48>
 6d8:	d43ff0ef          	jal	ra,41a <print_uart>

    /** Check ADC detector that RF front-end is connected: */
    tech = (pnp->tech >> 24) & 0xff;
 6dc:	fe843783          	ld	a5,-24(s0)
 6e0:	479c                	lw	a5,8(a5)
 6e2:	0187d79b          	srliw	a5,a5,0x18
 6e6:	faf42e23          	sw	a5,-68(s0)
    if (tech != 0xFF) {
 6ea:	fbc42783          	lw	a5,-68(s0)
 6ee:	0007871b          	sext.w	a4,a5
 6f2:	0ff00793          	li	a5,255
 6f6:	02f70563          	beq	a4,a5,720 <_init+0xfa>
        print_uart("ADC clock not found. Enable DIP int_rf.\r\n", 41);
 6fa:	02900593          	li	a1,41
 6fe:	6785                	lui	a5,0x1
 700:	b0878513          	addi	a0,a5,-1272 # b08 <FSE2_STATE_IDLE+0x50>
 704:	d17ff0ef          	jal	ra,41a <print_uart>
        tech = (pnp->tech >> 24) & 0xff;
 708:	fe843783          	ld	a5,-24(s0)
 70c:	479c                	lw	a5,8(a5)
 70e:	0187d79b          	srliw	a5,a5,0x18
 712:	faf42e23          	sw	a5,-68(s0)
        led_set(tech);
 716:	fbc42783          	lw	a5,-68(s0)
 71a:	853e                	mv	a0,a5
 71c:	ca3ff0ef          	jal	ra,3be <led_set>
    }
    led_set(0x04);
 720:	4511                	li	a0,4
 722:	c9dff0ef          	jal	ra,3be <led_set>
}
 726:	0001                	nop
 728:	60a6                	ld	ra,72(sp)
 72a:	6406                	ld	s0,64(sp)
 72c:	6161                	addi	sp,sp,80
 72e:	8082                	ret

0000000000000730 <main>:

/** Not used actually */
int main() {
 730:	1141                	addi	sp,sp,-16
 732:	e422                	sd	s0,8(sp)
 734:	0800                	addi	s0,sp,16
    while (1) {}
 736:	a001                	j	736 <main+0x6>

0000000000000738 <get_mcause>:

extern void print_uart(const char *buf, int sz);
extern void print_uart_hex(long val);
extern void led_set(int output);

int get_mcause() {
 738:	1101                	addi	sp,sp,-32
 73a:	ec22                	sd	s0,24(sp)
 73c:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mcause" : "=r" (ret));
 73e:	342027f3          	csrr	a5,mcause
 742:	fef42623          	sw	a5,-20(s0)
    return ret;
 746:	fec42783          	lw	a5,-20(s0)
}
 74a:	853e                	mv	a0,a5
 74c:	6462                	ld	s0,24(sp)
 74e:	6105                	addi	sp,sp,32
 750:	8082                	ret

0000000000000752 <get_mepc>:

int get_mepc() {
 752:	1101                	addi	sp,sp,-32
 754:	ec22                	sd	s0,24(sp)
 756:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mepc" : "=r" (ret));
 758:	341027f3          	csrr	a5,mepc
 75c:	fef42623          	sw	a5,-20(s0)
    return ret;
 760:	fec42783          	lw	a5,-20(s0)
}
 764:	853e                	mv	a0,a5
 766:	6462                	ld	s0,24(sp)
 768:	6105                	addi	sp,sp,32
 76a:	8082                	ret

000000000000076c <exception_handler_c>:

void exception_handler_c() {
 76c:	1141                	addi	sp,sp,-16
 76e:	e406                	sd	ra,8(sp)
 770:	e022                	sd	s0,0(sp)
 772:	0800                	addi	s0,sp,16
    print_uart("mcause:", 7);
 774:	459d                	li	a1,7
 776:	6785                	lui	a5,0x1
 778:	b3878513          	addi	a0,a5,-1224 # b38 <FSE2_STATE_IDLE+0x80>
 77c:	c9fff0ef          	jal	ra,41a <print_uart>
    print_uart_hex(get_mcause());
 780:	fb9ff0ef          	jal	ra,738 <get_mcause>
 784:	87aa                	mv	a5,a0
 786:	853e                	mv	a0,a5
 788:	d03ff0ef          	jal	ra,48a <print_uart_hex>
    print_uart(",mepc:", 6);
 78c:	4599                	li	a1,6
 78e:	6785                	lui	a5,0x1
 790:	b4078513          	addi	a0,a5,-1216 # b40 <FSE2_STATE_IDLE+0x88>
 794:	c87ff0ef          	jal	ra,41a <print_uart>
    print_uart_hex(get_mepc());
 798:	fbbff0ef          	jal	ra,752 <get_mepc>
 79c:	87aa                	mv	a5,a0
 79e:	853e                	mv	a0,a5
 7a0:	cebff0ef          	jal	ra,48a <print_uart_hex>
    print_uart("\r\n", 2);
 7a4:	4589                	li	a1,2
 7a6:	6785                	lui	a5,0x1
 7a8:	b4878513          	addi	a0,a5,-1208 # b48 <FSE2_STATE_IDLE+0x90>
 7ac:	c6fff0ef          	jal	ra,41a <print_uart>

    /// Exception trap
    led_set(0xF0);
 7b0:	0f000513          	li	a0,240
 7b4:	c0bff0ef          	jal	ra,3be <led_set>
    while (1) {}
 7b8:	a001                	j	7b8 <exception_handler_c+0x4c>

00000000000007ba <interrupt_handler_c>:
}

long interrupt_handler_c(long cause, long epc, long long regs[32]) {
 7ba:	715d                	addi	sp,sp,-80
 7bc:	e486                	sd	ra,72(sp)
 7be:	e0a2                	sd	s0,64(sp)
 7c0:	0880                	addi	s0,sp,80
 7c2:	fca43423          	sd	a0,-56(s0)
 7c6:	fcb43023          	sd	a1,-64(s0)
 7ca:	fac43c23          	sd	a2,-72(s0)
     * If we woudn't do it the interrupt handler will be called infinitly
     *
     * Rise interrupt from the software maybe done sending a self-IPI:
     *      csrwi mipi, 0
     */
    irqctrl_map *p_irqctrl = (irqctrl_map *)ADDR_BUS0_XSLV_IRQCTRL;
 7ce:	400017b7          	lui	a5,0x40001
 7d2:	0786                	slli	a5,a5,0x1
 7d4:	fef43023          	sd	a5,-32(s0)
    IRQ_HANDLER irq_handler = (IRQ_HANDLER)p_irqctrl->isr_table;
 7d8:	fe043783          	ld	a5,-32(s0)
 7dc:	6b9c                	ld	a5,16(a5)
 7de:	fcf43c23          	sd	a5,-40(s0)
    uint32_t pending;
    csr_mcause_type mcause;

    mcause.value = cause;
 7e2:	fc843783          	ld	a5,-56(s0)
 7e6:	fcf43823          	sd	a5,-48(s0)
    p_irqctrl->dbg_cause = cause;
 7ea:	fc843703          	ld	a4,-56(s0)
 7ee:	fe043783          	ld	a5,-32(s0)
 7f2:	ef98                	sd	a4,24(a5)
    p_irqctrl->dbg_epc = epc;
 7f4:	fc043703          	ld	a4,-64(s0)
 7f8:	fe043783          	ld	a5,-32(s0)
 7fc:	f398                	sd	a4,32(a5)

    p_irqctrl->irq_lock = 1;
 7fe:	fe043783          	ld	a5,-32(s0)
 802:	4705                	li	a4,1
 804:	d798                	sw	a4,40(a5)
    pending = p_irqctrl->irq_pending;
 806:	fe043783          	ld	a5,-32(s0)
 80a:	43dc                	lw	a5,4(a5)
 80c:	fef42623          	sw	a5,-20(s0)
    p_irqctrl->irq_clear = pending;
 810:	fe043783          	ld	a5,-32(s0)
 814:	fec42703          	lw	a4,-20(s0)
 818:	c798                	sw	a4,8(a5)
    p_irqctrl->irq_lock = 0;
 81a:	fe043783          	ld	a5,-32(s0)
 81e:	0207a423          	sw	zero,40(a5) # 40001028 <_end+0x400004b2>

    for (int i = 0; i < CFG_IRQ_TOTAL; i++) {
 822:	fe042423          	sw	zero,-24(s0)
 826:	a82d                	j	860 <interrupt_handler_c+0xa6>
        if (pending & 0x1) {
 828:	fec42783          	lw	a5,-20(s0)
 82c:	8b85                	andi	a5,a5,1
 82e:	2781                	sext.w	a5,a5
 830:	cf89                	beqz	a5,84a <interrupt_handler_c+0x90>
            p_irqctrl->irq_cause_idx = i;
 832:	fe842703          	lw	a4,-24(s0)
 836:	fe043783          	ld	a5,-32(s0)
 83a:	d7d8                	sw	a4,44(a5)
            irq_handler(i, NULL);
 83c:	fe842783          	lw	a5,-24(s0)
 840:	fd843703          	ld	a4,-40(s0)
 844:	4581                	li	a1,0
 846:	853e                	mv	a0,a5
 848:	9702                	jalr	a4
        }
        pending >>= 1;
 84a:	fec42783          	lw	a5,-20(s0)
 84e:	0017d79b          	srliw	a5,a5,0x1
 852:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < CFG_IRQ_TOTAL; i++) {
 856:	fe842783          	lw	a5,-24(s0)
 85a:	2785                	addiw	a5,a5,1
 85c:	fef42423          	sw	a5,-24(s0)
 860:	fe842783          	lw	a5,-24(s0)
 864:	0007871b          	sext.w	a4,a5
 868:	4791                	li	a5,4
 86a:	fae7dfe3          	bge	a5,a4,828 <interrupt_handler_c+0x6e>
    }

    return epc;
 86e:	fc043783          	ld	a5,-64(s0)
}
 872:	853e                	mv	a0,a5
 874:	60a6                	ld	ra,72(sp)
 876:	6406                	ld	s0,64(sp)
 878:	6161                	addi	sp,sp,80
 87a:	8082                	ret

000000000000087c <env_ucall_c>:

void env_ucall_c(long long test_id) {
 87c:	1101                	addi	sp,sp,-32
 87e:	ec06                	sd	ra,24(sp)
 880:	e822                	sd	s0,16(sp)
 882:	1000                	addi	s0,sp,32
 884:	fea43423          	sd	a0,-24(s0)
    if (test_id != 0) {
 888:	fe843783          	ld	a5,-24(s0)
 88c:	cb85                	beqz	a5,8bc <env_ucall_c+0x40>
        print_uart("TEST_FAILED\r\n", 13);
 88e:	45b5                	li	a1,13
 890:	6785                	lui	a5,0x1
 892:	b5078513          	addi	a0,a5,-1200 # b50 <FSE2_STATE_IDLE+0x98>
 896:	b85ff0ef          	jal	ra,41a <print_uart>
        print_uart("a0=", 3);
 89a:	458d                	li	a1,3
 89c:	6785                	lui	a5,0x1
 89e:	b6078513          	addi	a0,a5,-1184 # b60 <FSE2_STATE_IDLE+0xa8>
 8a2:	b79ff0ef          	jal	ra,41a <print_uart>
        print_uart_hex(test_id);
 8a6:	fe843503          	ld	a0,-24(s0)
 8aa:	be1ff0ef          	jal	ra,48a <print_uart_hex>
        print_uart("\r\n", 2);
 8ae:	4589                	li	a1,2
 8b0:	6785                	lui	a5,0x1
 8b2:	b4878513          	addi	a0,a5,-1208 # b48 <FSE2_STATE_IDLE+0x90>
 8b6:	b65ff0ef          	jal	ra,41a <print_uart>
 8ba:	a039                	j	8c8 <env_ucall_c+0x4c>
    } else {
        print_uart("TEST_PASSED\r\n", 13);
 8bc:	45b5                	li	a1,13
 8be:	6785                	lui	a5,0x1
 8c0:	b6878513          	addi	a0,a5,-1176 # b68 <FSE2_STATE_IDLE+0xb0>
 8c4:	b57ff0ef          	jal	ra,41a <print_uart>
    }
    while (1) {}
 8c8:	a001                	j	8c8 <env_ucall_c+0x4c>
	...

00000000000008cc <memcpy>:
 8cc:	00a5c7b3          	xor	a5,a1,a0
 8d0:	0077f793          	andi	a5,a5,7
 8d4:	00c508b3          	add	a7,a0,a2
 8d8:	06079263          	bnez	a5,93c <memcpy+0x70>
 8dc:	00700793          	li	a5,7
 8e0:	04c7fe63          	bgeu	a5,a2,93c <memcpy+0x70>
 8e4:	00757793          	andi	a5,a0,7
 8e8:	00050713          	mv	a4,a0
 8ec:	06079863          	bnez	a5,95c <memcpy+0x90>
 8f0:	ff88f613          	andi	a2,a7,-8
 8f4:	fc060793          	addi	a5,a2,-64
 8f8:	08f76c63          	bltu	a4,a5,990 <memcpy+0xc4>
 8fc:	02c77c63          	bgeu	a4,a2,934 <memcpy+0x68>
 900:	00058693          	mv	a3,a1
 904:	00070793          	mv	a5,a4
 908:	0006b803          	ld	a6,0(a3)
 90c:	00878793          	addi	a5,a5,8
 910:	00868693          	addi	a3,a3,8
 914:	ff07bc23          	sd	a6,-8(a5)
 918:	fec7e8e3          	bltu	a5,a2,908 <memcpy+0x3c>
 91c:	fff60793          	addi	a5,a2,-1
 920:	40e787b3          	sub	a5,a5,a4
 924:	ff87f793          	andi	a5,a5,-8
 928:	00878793          	addi	a5,a5,8
 92c:	00f70733          	add	a4,a4,a5
 930:	00f585b3          	add	a1,a1,a5
 934:	01176863          	bltu	a4,a7,944 <memcpy+0x78>
 938:	00008067          	ret
 93c:	00050713          	mv	a4,a0
 940:	ff157ce3          	bgeu	a0,a7,938 <memcpy+0x6c>
 944:	0005c783          	lbu	a5,0(a1)
 948:	00170713          	addi	a4,a4,1
 94c:	00158593          	addi	a1,a1,1
 950:	fef70fa3          	sb	a5,-1(a4)
 954:	ff1768e3          	bltu	a4,a7,944 <memcpy+0x78>
 958:	00008067          	ret
 95c:	0005c683          	lbu	a3,0(a1)
 960:	00170713          	addi	a4,a4,1
 964:	00777793          	andi	a5,a4,7
 968:	fed70fa3          	sb	a3,-1(a4)
 96c:	00158593          	addi	a1,a1,1
 970:	f80780e3          	beqz	a5,8f0 <memcpy+0x24>
 974:	0005c683          	lbu	a3,0(a1)
 978:	00170713          	addi	a4,a4,1
 97c:	00777793          	andi	a5,a4,7
 980:	fed70fa3          	sb	a3,-1(a4)
 984:	00158593          	addi	a1,a1,1
 988:	fc079ae3          	bnez	a5,95c <memcpy+0x90>
 98c:	f65ff06f          	j	8f0 <memcpy+0x24>
 990:	0005b683          	ld	a3,0(a1)
 994:	0085b283          	ld	t0,8(a1)
 998:	0105bf83          	ld	t6,16(a1)
 99c:	0185bf03          	ld	t5,24(a1)
 9a0:	0205be83          	ld	t4,32(a1)
 9a4:	0285be03          	ld	t3,40(a1)
 9a8:	0305b303          	ld	t1,48(a1)
 9ac:	0385b803          	ld	a6,56(a1)
 9b0:	04858593          	addi	a1,a1,72
 9b4:	00d73023          	sd	a3,0(a4)
 9b8:	ff85b683          	ld	a3,-8(a1)
 9bc:	00573423          	sd	t0,8(a4)
 9c0:	01f73823          	sd	t6,16(a4)
 9c4:	01e73c23          	sd	t5,24(a4)
 9c8:	03d73023          	sd	t4,32(a4)
 9cc:	03c73423          	sd	t3,40(a4)
 9d0:	02673823          	sd	t1,48(a4)
 9d4:	03073c23          	sd	a6,56(a4)
 9d8:	04870713          	addi	a4,a4,72
 9dc:	fed73c23          	sd	a3,-8(a4)
 9e0:	faf768e3          	bltu	a4,a5,990 <memcpy+0xc4>
 9e4:	f19ff06f          	j	8fc <memcpy+0x30>

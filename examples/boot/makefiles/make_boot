include util.mak

CC=riscv64-unknown-elf-gcc
CPP=riscv64-unknown-elf-gcc
OBJDUMP=riscv64-unknown-elf-objdump

FPU_ENABLED=1
Cyclone_V=1

CFLAGS= -c -g -static -std=gnu99 -O0 -fno-common -fno-builtin-printf
ifeq ($(FPU_ENABLED), 1)
  CFLAGS += -march=rv64imafd -DFPU_ENABLED
else
  CFLAGS += -march=rv64imac -mabi=lp64
endif
ifeq ($(Cyclone_V), 1)
  CFLAGS += -DSYS_HZ=10000000
else
  CFLAGS += -DSYS_HZ=40000000
endif

LDFLAGS=-T test.ld -nostdlib -nostartfiles
ifeq ($(FPU_ENABLED), 1)
else
  LDFLAGS += -march=rv64imac -mabi=lp64
endif


INCL_KEY=-I
DIR_KEY=-B


# include sub-folders list
INCL_PATH=\
	$(TOP_DIR)../common \
	$(TOP_DIR)src

# source files directories list:
SRC_PATH =\
	$(TOP_DIR)src

LIB_NAMES =\
	gcc \
	c \
	m

VPATH = $(SRC_PATH)

SOURCES = main \
	trap \
	crt

OBJ_FILES = $(addsuffix .o,$(SOURCES))
EXECUTABLE = bootimage
DUMPFILE = $(EXECUTABLE).dump
HEXFILE = $(EXECUTABLE).hex
MIFFILE = $(EXECUTABLE).mif
LSTFILE = $(EXECUTABLE).lst

all: boot

.PHONY: $(EXECUTABLE) $(DUMPFILE)


boot: $(EXECUTABLE) $(DUMPFILE) $(HEXFILE) $(MIFFILE)

$(MIFFILE): $(EXECUTABLE)
	echo hex2mif $(ELF_DIR)/$(HEXFILE) $(ELF_DIR)/$(MIFFILE) 4096
	hex2mif $(ELF_DIR)/$(HEXFILE) $(ELF_DIR)/$(MIFFILE) 4096

$(HEXFILE): $(EXECUTABLE)
	echo elf2rawx $(addprefix $(ELF_DIR)/,$<) -h -f 32768 -l 8 -o $(addprefix $(ELF_DIR)/,$(EXECUTABLE).hex)
	elf2rawx $(addprefix $(ELF_DIR)/,$<) -h -f 32768 -l 8 -o $(addprefix $(ELF_DIR)/,$(EXECUTABLE).hex)

$(DUMPFILE): $(EXECUTABLE)
	echo $(OBJDUMP) --disassemble-all --disassemble-zeroes --section=.text --section=.text.startup --section=.data $(addprefix $(ELF_DIR)/,$<) > $(addprefix $(ELF_DIR)/,$@)
	$(OBJDUMP) --disassemble-all --disassemble-zeroes --section=.text --section=.text.startup --section=.data $(addprefix $(ELF_DIR)/,$<) > $(addprefix $(ELF_DIR)/,$@)
	$(OBJDUMP) -S $(addprefix $(ELF_DIR)/,$<) > $(addprefix $(ELF_DIR)/,$(LSTFILE))


$(EXECUTABLE): $(OBJ_FILES)
	echo $(CPP) $(LDFLAGS) $(addprefix $(OBJ_DIR)/,$(OBJ_FILES)) -o $(addprefix $(ELF_DIR)/,$@) $(addprefix -l,$(LIB_NAMES))
	$(CPP) $(LDFLAGS) $(addprefix $(OBJ_DIR)/,$(OBJ_FILES)) -o $(addprefix $(ELF_DIR)/,$@) $(addprefix -l,$(LIB_NAMES))
	$(ECHO) "\n  Shared Library has been built successfully.\n"

#.cpp.o:
%.o: %.cpp
	echo $(CPP) $(CFLAGS) $(addprefix $(INCL_KEY),$(INCL_PATH)) $< -o $(addprefix $(OBJ_DIR)/,$@)
	$(CPP) $(CFLAGS) $(addprefix $(INCL_KEY),$(INCL_PATH)) $< -o $(addprefix $(OBJ_DIR)/,$@)

#.c.o:
%.o: %.c
	echo $(CC) $(CFLAGS) $(addprefix $(INCL_KEY),$(INCL_PATH)) $< -o $(addprefix $(OBJ_DIR)/,$@)
	$(CC) $(CFLAGS) $(addprefix $(INCL_KEY),$(INCL_PATH)) $< -o $(addprefix $(OBJ_DIR)/,$@)

%.o: %.S
	echo $(CC) $(CFLAGS) -D__ASSEMBLY__=1 $(addprefix $(INCL_KEY),$(INCL_PATH)) $< -o $(addprefix $(OBJ_DIR)/,$@)
	$(CC) $(CFLAGS) -D__ASSEMBLY__=1 $(addprefix $(INCL_KEY),$(INCL_PATH)) $< -o $(addprefix $(OBJ_DIR)/,$@)


